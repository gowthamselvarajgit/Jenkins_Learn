pipeline {
    agent any 

    environment {
        IMAGE_NAME = "java-docker-app"
    }

    stages {

        stage('Clone Repo') {
            steps {
                git url: 'https://github.com/gowthamselvarajgit/Jenkins_Learn.git', branch: 'main'
            }
        }

        stage('Terraform Init and Apply') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'aws_creds',
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                    dir('ProvisonToJavaDeploy/terraform') {
                        sh '''
                            terraform init
                            terraform apply -auto-approve \
                                -var="aws_access_key=$AWS_ACCESS_KEY_ID" \
                                -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY"
                        '''
                    }
                }
            }
        }

        stage('Generate inventory') {
            steps {
                dir('ProvisonToJavaDeploy') {
                    sh 'chmod +x generate_inventory.sh'
                    sh './generate_inventory.sh'
                }
            }
        }

        stage('Show Inventory') {
            steps {
                dir('ProvisonToJavaDeploy/ansible') {
                    sh 'cat inventory.ini'
                }
            }
        }

        stage('Install Docker on EC2 using Ansible') {
            steps {
                sleep time: 60, unit: 'SECONDS'
                withCredentials([file(credentialsId: 'ec2_ssh_key', variable: 'EC2_PEM')]) {
                    dir('ProvisonToJavaDeploy/ansible') {
                        sh '''
                            chmod 400 "$EC2_PEM"
                            sed -i "s|ansible_ssh_private_key_file=.*|ansible_ssh_private_key_file=$EC2_PEM|" inventory.ini
                            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.ini install_docker.yaml
                        '''
                    }
                }
            }
        }

        stage('Build Java Docker Image') {
            steps {
                dir('ProvisonToJavaDeploy/java-app') {
                    sh 'docker build -t $IMAGE_NAME .'
                }
            }
        }

        stage('Push & Run Docker App on EC2') {
            steps {
                script {
                    def ec2_ip = sh(
                        script: 'cd ProvisonToJavaDeploy/terraform && terraform output -raw instance_ip',
                        returnStdout: true
                    ).trim()

                    if (!ec2_ip || ec2_ip.contains("â•·")) {
                        error("EC2 IP output is invalid. Check Terraform state/output.")
                    }

                    echo "EC2 IP: ${ec2_ip}"

                    withCredentials([file(credentialsId: 'ec2_ssh_key', variable: 'EC2_PEM')]) {
                        sh """
                            docker save ${IMAGE_NAME} > app.tar
                            scp -o StrictHostKeyChecking=no -i "\$EC2_PEM" app.tar ubuntu@${ec2_ip}:/home/ubuntu/
                            ssh -o StrictHostKeyChecking=no -i "\$EC2_PEM" ubuntu@${ec2_ip} '
                                docker load < /home/ubuntu/app.tar &&
                                docker run --rm ${IMAGE_NAME}
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment pipeline completed successfully.'
        }
        failure {
            echo 'Deployment pipeline failed. Check logs above.'
        }
    }
}
